// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RPCRequest is request of a RPC call.
type RPCRequest struct {
	// Params of the RPC.
	Params []byte `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Timeout sets an optinal timeout for this RPC.
	Timeout *duration.Duration `protobuf:"bytes,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Passthru is an optional dict carrying context values.
	Passthru             map[string]string `protobuf:"bytes,10,rep,name=passthru,proto3" json:"passthru,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RPCRequest) Reset()         { *m = RPCRequest{} }
func (m *RPCRequest) String() string { return proto.CompactTextString(m) }
func (*RPCRequest) ProtoMessage()    {}
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_ca810cc310f165d4, []int{0}
}
func (m *RPCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCRequest.Unmarshal(m, b)
}
func (m *RPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCRequest.Marshal(b, m, deterministic)
}
func (dst *RPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRequest.Merge(dst, src)
}
func (m *RPCRequest) XXX_Size() int {
	return xxx_messageInfo_RPCRequest.Size(m)
}
func (m *RPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRequest proto.InternalMessageInfo

func (m *RPCRequest) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RPCRequest) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RPCRequest) GetPassthru() map[string]string {
	if m != nil {
		return m.Passthru
	}
	return nil
}

// RPCErrorReply is error reply of a RPC call. Similar to jsonrpc.
type RPCErrorReply struct {
	// Code is the error code.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Message is the error description.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCErrorReply) Reset()         { *m = RPCErrorReply{} }
func (m *RPCErrorReply) String() string { return proto.CompactTextString(m) }
func (*RPCErrorReply) ProtoMessage()    {}
func (*RPCErrorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_ca810cc310f165d4, []int{1}
}
func (m *RPCErrorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCErrorReply.Unmarshal(m, b)
}
func (m *RPCErrorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCErrorReply.Marshal(b, m, deterministic)
}
func (dst *RPCErrorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCErrorReply.Merge(dst, src)
}
func (m *RPCErrorReply) XXX_Size() int {
	return xxx_messageInfo_RPCErrorReply.Size(m)
}
func (m *RPCErrorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCErrorReply.DiscardUnknown(m)
}

var xxx_messageInfo_RPCErrorReply proto.InternalMessageInfo

func (m *RPCErrorReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RPCErrorReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// RPCReply is reply of a RPC call.
type RPCReply struct {
	// Result is the normal reply of the RPC. Must not set when there is an error.
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// Error is the error reply of the RPC. Must not set when there is no error.
	Error                *RPCErrorReply `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RPCReply) Reset()         { *m = RPCReply{} }
func (m *RPCReply) String() string { return proto.CompactTextString(m) }
func (*RPCReply) ProtoMessage()    {}
func (*RPCReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_ca810cc310f165d4, []int{2}
}
func (m *RPCReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCReply.Unmarshal(m, b)
}
func (m *RPCReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCReply.Marshal(b, m, deterministic)
}
func (dst *RPCReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCReply.Merge(dst, src)
}
func (m *RPCReply) XXX_Size() int {
	return xxx_messageInfo_RPCReply.Size(m)
}
func (m *RPCReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCReply.DiscardUnknown(m)
}

var xxx_messageInfo_RPCReply proto.InternalMessageInfo

func (m *RPCReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RPCReply) GetError() *RPCErrorReply {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCRequest)(nil), "pb.RPCRequest")
	proto.RegisterMapType((map[string]string)(nil), "pb.RPCRequest.PassthruEntry")
	proto.RegisterType((*RPCErrorReply)(nil), "pb.RPCErrorReply")
	proto.RegisterType((*RPCReply)(nil), "pb.RPCReply")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_ca810cc310f165d4) }

var fileDescriptor_rpc_ca810cc310f165d4 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x50, 0xcb, 0x4e, 0xb3, 0x40,
	0x14, 0x0e, 0xed, 0x0f, 0x2d, 0x87, 0xbf, 0x89, 0x4e, 0x4c, 0x83, 0x8d, 0x31, 0x84, 0x8d, 0xac,
	0xa6, 0x09, 0xdd, 0x34, 0x1a, 0x57, 0xb5, 0x2b, 0x37, 0x64, 0xde, 0x60, 0x68, 0x8f, 0xd8, 0x08,
	0x9d, 0x71, 0x2e, 0x26, 0xbc, 0xa5, 0x8f, 0x64, 0x18, 0xc0, 0xc6, 0xdd, 0xf9, 0xce, 0x77, 0x39,
	0x17, 0x08, 0x95, 0x3c, 0x50, 0xa9, 0x84, 0x11, 0x64, 0x22, 0xcb, 0xd5, 0x7d, 0x25, 0x44, 0x55,
	0xe3, 0xda, 0x75, 0x4a, 0xfb, 0xb6, 0x3e, 0x5a, 0xc5, 0xcd, 0x49, 0x9c, 0x7b, 0x4d, 0xfa, 0xed,
	0x01, 0xb0, 0x62, 0xc7, 0xf0, 0xd3, 0xa2, 0x36, 0x64, 0x09, 0x81, 0xe4, 0x8a, 0x37, 0x3a, 0xf6,
	0x12, 0x2f, 0xfb, 0xcf, 0x06, 0x44, 0x36, 0x30, 0x33, 0xa7, 0x06, 0x85, 0x35, 0x71, 0x98, 0x78,
	0x59, 0x94, 0xdf, 0xd2, 0x3e, 0x98, 0x8e, 0xc1, 0xf4, 0x65, 0x08, 0x66, 0xa3, 0x92, 0x6c, 0x61,
	0x2e, 0xb9, 0xd6, 0xe6, 0x5d, 0xd9, 0x18, 0x92, 0x69, 0x16, 0xe5, 0x77, 0x54, 0x96, 0xf4, 0x32,
	0x8e, 0x16, 0x03, 0xbd, 0x3f, 0x1b, 0xd5, 0xb2, 0x5f, 0xf5, 0xea, 0x09, 0x16, 0x7f, 0x28, 0x72,
	0x05, 0xd3, 0x0f, 0x6c, 0xdd, 0x52, 0x21, 0xeb, 0x4a, 0x72, 0x03, 0xfe, 0x17, 0xaf, 0x2d, 0xc6,
	0x13, 0xd7, 0xeb, 0xc1, 0xe3, 0x64, 0xeb, 0xa5, 0xcf, 0xb0, 0x60, 0xc5, 0x6e, 0xaf, 0x94, 0x50,
	0x0c, 0x65, 0xdd, 0x12, 0x02, 0xff, 0x0e, 0xe2, 0x88, 0xce, 0xed, 0x33, 0x57, 0x93, 0x18, 0x66,
	0x0d, 0x6a, 0xcd, 0xab, 0x31, 0x60, 0x84, 0xe9, 0x2b, 0xcc, 0xdd, 0x86, 0x9d, 0x73, 0x09, 0x81,
	0x42, 0x6d, 0x6b, 0x33, 0xbe, 0xa3, 0x47, 0xe4, 0x01, 0x7c, 0xec, 0xf2, 0x9d, 0x37, 0xca, 0xaf,
	0x87, 0xb3, 0x2e, 0x33, 0x59, 0xcf, 0x97, 0x81, 0x7b, 0xcf, 0xe6, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x8e, 0x62, 0xc5, 0x83, 0x96, 0x01, 0x00, 0x00,
}
